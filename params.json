{
  "name": "Networkcoding",
  "tagline": "Implementation of network coding data transportation",
  "body": "# NetworkCoding\r\n  - Implementation of network coding data transportation.\r\n  - Example code can be found in main.cpp.\r\n\r\n# Why network coding transport\r\n  - Provide reliable packet transport \r\n  - Guarantee packet order\r\n  - Data is not stream but block, like UDP.\r\n\r\n# Contributions\r\n  - I welcome any contributions from you.\r\n\r\n# Features supported\r\n  - Thread-safe\r\n  - Full-duplex reliable data communication. (The packet order is preserved)\r\n  - Full-duplex best-effort communication with constant redundancy for multimedia service. (The packet order is preserved)\r\n  - Connectivity check.\r\n  - Change network coding session parameters, e.g., block size, redundancy, retransmission interval, and etc, after \"open_session\"\r\n\r\n# Features under developing\r\n  - Congestion control for retransmission.\r\n  - Extention to multicast transmission.\r\n\r\n#Example\r\n```C++\r\n#include \"ncsocket.h\"\r\n\r\nvoid rx_callback(unsigned char* buff, unsigned int size, sockaddr_in sender){\r\n  /*Do something with the data*/\r\n}\r\n\r\n// Reliable transmission\r\n{\r\n  ncsocket nc_socket(port, tx_timeout, rx_timeout, rx_callback);\r\n  nc_socket.open_session(client_ip, client_port, BLOCK_SIZE::SIZE8, retransmission_interval);\r\n  nc_socket.send(client_ip, client_port, buffer, buffer_size, false);\r\n  /*\r\n   * Retransmission is triggered every BLOCK_SIZE of packets are transmitted. \r\n   * If you want to immediately trigger retransmission pass \"true\" for the last argument as shown in below.\r\n   */\r\n  nc_socket.send(client_ip, client_port, buffer, buffer_size, true);\r\n}\r\n\r\n// Best-effort transmission with constant redundancy\r\n{\r\n  ncsocket nc_socket(port, tx_timeout, rx_timeout, rx_callback);\r\n  nc_socket.open_session(client_ip, client_port, BLOCK_SIZE::SIZE8, retransmission_interval, 4 /*Number of redundant packets*/);\r\n  nc_socket.send(client_ip, client_port, buffer, buffer_size, false);\r\n  /*\r\n   * 4 redundant packets are transmitted after all BLOCK_SIZE of packets are sent. \r\n   * If you want to immediately send redundant packets pass \"true\" for the last argument as shown in below.\r\n   */\r\n  nc_socket.send(client_ip, client_port, buffer, buffer_size, true);\r\n}\r\n\r\n// Make sure if remote host is ready to receive packet\r\n{\r\n  ncsocket nc_socket(port, tx_timeout, rx_timeout, rx_callback);\r\n  nc_socket.open_session(client_ip, client_port, BLOCK_SIZE::SIZE8, retransmission_interval, 4 /*Number of redundant packets*/);\r\n  if(nc_socket.connect_session(client_ip, client_port, 3, 500) == true)\r\n  {\r\n    // Remote host is ready.\r\n  }\r\n  else\r\n  {\r\n    // The host is not ready.\r\n  }\r\n}\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}